---
title: "Programming in Base R"
format: html
editor: visual
---

# Task 1: Basic Vector practice

## 1. Create two vectors for the pre-treatment and post treatement measurements.

```{r}
TreatmentPreBP <-c(130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)

TreatmentAfterBP <-c(114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)

TreatmentPreBP
TreatmentAfterBP

```

## 2. Assign names to the vector elements.

```{r}
TreatmentSubject <- paste("Subject", 1:20, sep = "_")
TreatmentSubject

```

## 3. Calculate change in blood pressure between treatements.

```{r}
TreatmentDiffBP <- (TreatmentAfterBP-TreatmentPreBP) 

TreatmentDiffBP
```

## 4. Calculate the average decrease in blood pressure across all patients.

```{r}
mean(TreatmentDiffBP)
```

## 5. Determine which patients experienced a decrease in blood pressure.

```{r}
TreatmentSubject[which(TreatmentAfterBP < TreatmentPreBP)]
```

## 6. Subset the vector of differences to only return those that have a positive change

```{r}
TreatmentDiffBP [which(TreatmentAfterBP < TreatmentPreBP)]
```

## 7. Calculate the average decrease in blood pressure.

```{r}
mean(TreatmentDiffBP[which(TreatmentAfterBP < TreatmentPreBP)])
```

# Task 2

## 1. Create a data frame object with four columns corresponding to the above data.

```{r}
TreatmentDF <- data.frame(TreatmentSubject, TreatmentPreBP, TreatmentAfterBP, TreatmentDiffBP)

TreatmentDF
```


## 2. Return only rows where TreatmentDiffBP column is negative.

```{r}
TreatmentDF[which(TreatmentDF$TreatmentDiffBP < 0), ]
```


### Referencing the tidyverse library to run "mutate()"
```{r}
### Tidyverse installed, still getting the message "Error in mutate(TreatmentDF, TreatmentBPUnder120 = TreatmentAfterBP <  : could not find function "mutate""
library(tidyverse)
```


## 3. Add a new column to the data frame corresponding to TRUE if the AfterTreatmentBP is less than 120.
```{r}
TreatmentDF <- TreatmentDF |>
  mutate(TreatmentBPUnder120 = TreatmentAfterBP < 120)
TreatmentDF$TreatmentBPUnder120
```

## 4. Print the data frame out nicely in the final documnet.

```{r}
knitr::kable(TreatmentDF)
```

# Task 3

## 1. Create a new data frame with the placebo experiment.

```{r}
PlaceboDF <- data.frame(PlaceboSubject = 
  PlaceboSubject <- paste("Subject", 1:10, sep = "_"), 
  PlaceboBeforeBP = PlaceboBeforeBP <- c(138, 135, 147, 117, 152, 134, 114, 121, 131, 130), 
  PlaceboAfterBP = PlaceboAfterBP <- c(105, 136, 123, 130, 134, 143, 135, 139, 120, 124), 
  PlaceboDiffBP = PlaceboDiffBP <- (PlaceboAfterBP - PlaceboBeforeBP) 
)
PlaceboDF <- PlaceboDF |> mutate(PlaceboBPUnder120 = PlaceboAfterBP < 120)

PlaceboDF

```

## 2. Create and store a list with two elemenets. TreatementDF and PlaceboDF

```{r}
BloodPressure <- list(TreatmentDF, PlaceboDF)

BloodPressure
```

## 3. Access the first list element using three different types of syntax

```{r}
BloodPressure[1]
BloodPressure[1:1]
BloodPressure[[1]]
```

## 4. In one line, access the placebo data frame, PlaceboBefore column

```{r}
BloodPressure[[2]][[2]]
```

# Task 4

## 1. Create a new "status" column in each data frame above

```{r}
BloodPressure[[1]]$Status <- character(20) 
BloodPressure[[2]]$Status <- character(10) 
```

## 2. Create a loop using if/than/else logic to create the status column's values.

```{r}
 for (i in seq_along(BloodPressure[[1]][[6]])){
if (BloodPressure[[1]]$TreatmentAfterBP[i] <= 120) {
  BloodPressure[[1]]$Status[i] <- "Optimal"
} else if (BloodPressure[[1]]$TreatmentAfterBP[i] <= 130) {
  BloodPressure[[1]]$Status[i] <- "Borderline"
} else if (BloodPressure[[1]]$TreatmentAfterBP[i] > 130) {
  BloodPressure[[1]]$Status[i] <-"High"
} else {
  BloodPressure[[1]]$Status[i] <-"Error"
}
}
```

## 3. Repeat step 2 for the placebo data frame (within the list).

```{r}
 for (i in seq_along(BloodPressure[[2]][[6]])){
if (BloodPressure[[2]]$PlaceboAfterBP[i] <= 120) {
  BloodPressure[[2]]$Status[i] <- "Optimal"
} else if (BloodPressure[[2]]$PlaceboAfterBP[i] <= 130) {
  BloodPressure[[2]]$Status[i] <- "Borderline"
} else if (BloodPressure[[2]]$PlaceboAfterBP[i] > 130) {
  BloodPressure[[2]]$Status[i] <-"High"
} else {
  BloodPressure[[2]]$Status[i] <-"Error"
}
}
```

# Task 5

## Write a function that

### - Takes in a list with two data frames in it

### - Takes in an R function with the default value being set to "mean"

### - Finds the statistic of interest for the pre, post, and diff columns of both data frames

#### Blood Pressure Statistics of Interest

##### Key: BPStat(list name, statistic wanted). The default statistic is "mean".

```{r}
ListNames <- c("TreatmentPrePB","TreatmentAfterBP","TreatmentDiffBP", "PlaceboPreBP", "PlaceboAfterBP", "PlaceboDiffBP")
BPStat <- function(x,y = mean){
  list(
    "TreatmentPreBP" = y(x[[1]][[2]]), 
    "TreatmentAfterBP" = y(x[[1]][[3]]), 
    "TreatmentDiffBP" = y(x[[1]][[4]]), 
    "PlaceboPreBP" = y(x[[2]][[2]]), 
    "PlaceboAfterBP" = y(x[[2]][[3]]), 
    "PlaceboDiffBP" = y(x[[2]][[4]])
    )
 }

BPStat(BloodPressure)
```
